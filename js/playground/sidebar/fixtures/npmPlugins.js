define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.allNPMPlugins = void 0;
    exports.allNPMPlugins = [
        {
            name: "Dt Review",
            id: "playground-dt-review",
            description: "Makes reviewing DefinitelyTyped PRs easier",
            author: "orta",
            href: "https://github.com/orta/playground-dt-review",
        },
        {
            name: "@Structured Types/plugin",
            id: "@structured-types/playground-plugin",
            description: "TypeScript playground plugin to display the types from source code.",
            author: "atanasster",
            href: "https://github.com/ccontrols/structured-types",
        },
        {
            name: "@Structured Types/instant Documentation Plugin",
            id: "@structured-types/instant-documentation-plugin",
            description: "TypeScript playground plugin to display instant documentation.",
            author: "atanasster",
            href: "https://github.com/ccontrols/structured-types",
        },
        {
            name: "Link Shortener",
            id: "typescript-playground-link-shortener",
            description: "Create short-links for your current playground code and compiler settings",
            author: "gillchristian",
            href: "https://github.com/gillchristian/tsplay.dev",
        },
        {
            name: "Format On Save",
            id: "playground-format-on-save",
            description: "TypeScript Playground plugin to save on format",
            author: "anuraghazra",
            href: "https://github.com/anuraghazra/playground-format-on-save",
        },
        {
            name: "Prettier",
            id: "ts-playground-plugin-prettier",
            description: "A simple button to make valid playground code Prettier!",
            author: "xavdid",
            href: "https://github.com/xavdid/ts-playground-plugin-prettier",
        },
        {
            name: "Live Transformer",
            id: "playground-live-transformer",
            description: "A plugin to create a TypeScript transformer live in the playground",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-live-transformer",
        },
        {
            name: "GitHub Explorer",
            id: "ts-playground-plugin-github-explorer",
            description: "Explore a GitHub repo on TypeScript playground",
            author: "emnudge",
            href: "https://www.npmjs.com/package/ts-playground-plugin-github-explorer",
        },
        {
            name: "Vim",
            id: "ts-playground-plugin-vim",
            description: "Provides Vim keybindings for TypeScript Playground editor.",
            author: "quramy",
            href: "https://www.npmjs.com/package/ts-playground-plugin-vim",
        },
        {
            name: "Ts Transform Runtime Check",
            id: "playground-ts-transform-runtime-check",
            description: "A playground plugin for ts-transform-runtime-check",
            author: "kevram",
            href: "https://github.com/kevinramharak/playground-ts-transform-runtime-check",
        },
        {
            name: "Presentation Mode",
            id: "typescript-playground-presentation-mode",
            description: "Present your TypeScript talk directly in the playground, powered by GitHub gists!",
            author: "orta",
            href: "https://github.com/orta/playground-slides",
        },
        {
            name: "Code Show Flow",
            id: "playground-code-show-flow",
            description: "Visualize TypeScript's code inference flow nodes",
            author: "orta",
            href: "https://github.com/orta/playground-code-show-flow",
        },
        {
            name: "Ts Scanner",
            id: "playground-ts-scanner",
            description: "See the results of the TypeScript Scanner on some code",
            author: "orta",
            href: "https://github.com/orta/playground-ts-scanner",
        },
        {
            name: "Collaborate",
            id: "playground-collaborate",
            description: "A simple way to live-code in the Playground with others.",
            author: "orta",
            href: "https://github.com/orta/playground-collaborate",
        },
        {
            name: "Transformer Timeline",
            id: "playground-transformer-timeline",
            description: "Lets you see each stage of the transform process for a TypeScript JS + DTS emit as a timeline.",
            author: "orta",
            href: "https://github.com/orta/playground-transformer-timeline",
        },
        {
            name: "@Type Challenges/plugin",
            id: "@type-challenges/playground-plugin",
            description: "Playground integration for Type Challenges",
            author: "antfu",
            href: "https://github.com/type-challenges/playground-type-challenges-plugin",
        },
        {
            name: "Clippy",
            id: "playground-clippy",
            description: "Finally, someone who has an answer for every problem in your Playground",
            author: "orta",
            href: "https://github.com/orta/playground-clippy",
        },
        {
            name: "Codeblock Examples",
            id: "playground-plugin-codeblock-examples",
            description: "Use markdown codeblocks to demo many code samples in the playground",
            author: "orta",
            href: "https://github.com/orta/playground-plugin-codeblock-examples",
        },
        {
            name: "TypeScript Json Schema",
            id: "playground-typescript-json-schema",
            description: "Convert the exported types/interfaces in the Playground to JSON Schemas",
            author: "orta",
            href: "https://github.com/orta/playground-typescript-json-schema",
        },
        {
            name: "Ts Symbols",
            id: "playground-ts-symbols",
            description: "Shows the compiler symbols which are created by your playground code",
            author: "orta",
            href: "https://github.com/orta/playground-ts-symbols",
        },
        {
            name: "Planning Day",
            id: "planning-day",
            description: "TypeScript Playground plugin for planning an agile sprint or iteration by combining static type verification of configuration with a React Gantt chart visualization.",
            author: "jsuder",
            href: "https://github.com/JSuder-xx/planning-day",
        },
        {
            name: "Dts Plugin",
            id: "playground-dts-plugin",
            description: "Generate d.ts from JS",
            author: "sanders_n",
            href: "https://github.com/sandersn/playground-dts-plugin",
        },
    ];
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtUGx1Z2lucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BsYXlncm91bmQvc3JjL3NpZGViYXIvZml4dHVyZXMvbnBtUGx1Z2lucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBQWEsUUFBQSxhQUFhLEdBQUc7UUFDM0I7WUFDRSxJQUFJLEVBQUUsV0FBVztZQUNqQixFQUFFLEVBQUUsc0JBQXNCO1lBQzFCLFdBQVcsRUFBRSw0Q0FBNEM7WUFDekQsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsOENBQThDO1NBQ3JEO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsMEJBQTBCO1lBQ2hDLEVBQUUsRUFBRSxxQ0FBcUM7WUFDekMsV0FBVyxFQUNULHFFQUFxRTtZQUN2RSxNQUFNLEVBQUUsWUFBWTtZQUNwQixJQUFJLEVBQUUsK0NBQStDO1NBQ3REO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsZ0RBQWdEO1lBQ3RELEVBQUUsRUFBRSxnREFBZ0Q7WUFDcEQsV0FBVyxFQUNULGdFQUFnRTtZQUNsRSxNQUFNLEVBQUUsWUFBWTtZQUNwQixJQUFJLEVBQUUsK0NBQStDO1NBQ3REO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLEVBQUUsRUFBRSxzQ0FBc0M7WUFDMUMsV0FBVyxFQUNULDJFQUEyRTtZQUM3RSxNQUFNLEVBQUUsZUFBZTtZQUN2QixJQUFJLEVBQUUsNkNBQTZDO1NBQ3BEO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3RCLEVBQUUsRUFBRSwyQkFBMkI7WUFDL0IsV0FBVyxFQUFFLGdEQUFnRDtZQUM3RCxNQUFNLEVBQUUsYUFBYTtZQUNyQixJQUFJLEVBQUUsMERBQTBEO1NBQ2pFO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsVUFBVTtZQUNoQixFQUFFLEVBQUUsK0JBQStCO1lBQ25DLFdBQVcsRUFBRSx5REFBeUQ7WUFDdEUsTUFBTSxFQUFFLFFBQVE7WUFDaEIsSUFBSSxFQUFFLHlE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O1lBQ2hCLElBQUksRUFBRSwyQ0FBMkM7U0FDbEQ7UUFDRDtZQUNFLElBQUksRUFBRSxZQUFZO1lBQ2xCLEVBQUUsRUFBRSx1QkFBdUI7WUFDM0IsV0FBVyxFQUFFLHVCQUF1QjtZQUNwQyxNQUFNLEVBQUUsV0FBVztZQUNuQixJQUFJLEVBQUUsbURBQW1EO1NBQzFEO0tBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBhbGxOUE1QbHVnaW5zID0gW1xuICB7XG4gICAgbmFtZTogXCJEdCBSZXZpZXdcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLWR0LXJldmlld1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIk1ha2VzIHJldmlld2luZyBEZWZpbml0ZWx5VHlwZWQgUFJzIGVhc2llclwiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLWR0LXJldmlld1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJAU3RydWN0dXJlZCBUeXBlcy9wbHVnaW5cIixcbiAgICBpZDogXCJAc3RydWN0dXJlZC10eXBlcy9wbGF5Z3JvdW5kLXBsdWdpblwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJUeXBlU2NyaXB0IHBsYXlncm91bmQgcGx1Z2luIHRvIGRpc3BsYXkgdGhlIHR5cGVzIGZyb20gc291cmNlIGNvZGUuXCIsXG4gICAgYXV0aG9yOiBcImF0YW5hc3N0ZXJcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9jY29udHJvbHMvc3RydWN0dXJlZC10eXBlc1wiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJAU3RydWN0dXJlZCBUeXBlcy9pbnN0YW50IERvY3VtZW50YXRpb24gUGx1Z2luXCIsXG4gICAgaWQ6IFwiQHN0cnVjdHVyZWQtdHlwZXMvaW5zdGFudC1kb2N1bWVudGF0aW9uLXBsdWdpblwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJUeXBlU2NyaXB0IHBsYXlncm91bmQgcGx1Z2luIHRvIGRpc3BsYXkgaW5zdGFudCBkb2N1bWVudGF0aW9uLlwiLFxuICAgIGF1dGhvcjogXCJhdGFuYXNzdGVyXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vY2NvbnRyb2xzL3N0cnVjdHVyZWQtdHlwZXNcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiTGluayBTaG9ydGVuZXJcIixcbiAgICBpZDogXCJ0eXBlc2NyaXB0LXBsYXlncm91bmQtbGluay1zaG9ydGVuZXJcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiQ3JlYXRlIHNob3J0LWxpbmtzIGZvciB5b3VyIGN1cnJlbnQgcGxheWdyb3VuZCBjb2RlIGFuZCBjb21waWxlciBzZXR0aW5nc1wiLFxuICAgIGF1dGhvcjogXCJnaWxsY2hyaXN0aWFuXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vZ2lsbGNocmlzdGlhbi90c3BsYXkuZGV2XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkZvcm1hdCBPbiBTYXZlXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1mb3JtYXQtb24tc2F2ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlR5cGVTY3JpcHQgUGxheWdyb3VuZCBwbHVnaW4gdG8gc2F2ZSBvbiBmb3JtYXRcIixcbiAgICBhdXRob3I6IFwiYW51cmFnaGF6cmFcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9hbnVyYWdoYXpyYS9wbGF5Z3JvdW5kLWZvcm1hdC1vbi1zYXZlXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlByZXR0aWVyXCIsXG4gICAgaWQ6IFwidHMtcGxheWdyb3VuZC1wbHVnaW4tcHJldHRpZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBIHNpbXBsZSBidXR0b24gdG8gbWFrZSB2YWxpZCBwbGF5Z3JvdW5kIGNvZGUgUHJldHRpZXIhXCIsXG4gICAgYXV0aG9yOiBcInhhdmRpZFwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL3hhdmRpZC90cy1wbGF5Z3JvdW5kLXBsdWdpbi1wcmV0dGllclwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJMaXZlIFRyYW5zZm9ybWVyXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1saXZlLXRyYW5zZm9ybWVyXCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIkEgcGx1Z2luIHRvIGNyZWF0ZSBhIFR5cGVTY3JpcHQgdHJhbnNmb3JtZXIgbGl2ZSBpbiB0aGUgcGxheWdyb3VuZFwiLFxuICAgIGF1dGhvcjogXCJrZXZyYW1cIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9rZXZpbnJhbWhhcmFrL3BsYXlncm91bmQtbGl2ZS10cmFuc2Zvcm1lclwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJHaXRIdWIgRXhwbG9yZXJcIixcbiAgICBpZDogXCJ0cy1wbGF5Z3JvdW5kLXBsdWdpbi1naXRodWItZXhwbG9yZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJFeHBsb3JlIGEgR2l0SHViIHJlcG8gb24gVHlwZVNjcmlwdCBwbGF5Z3JvdW5kXCIsXG4gICAgYXV0aG9yOiBcImVtbnVkZ2VcIixcbiAgICBocmVmOiBcImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RzLXBsYXlncm91bmQtcGx1Z2luLWdpdGh1Yi1leHBsb3JlclwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJWaW1cIixcbiAgICBpZDogXCJ0cy1wbGF5Z3JvdW5kLXBsdWdpbi12aW1cIixcbiAgICBkZXNjcmlwdGlvbjogXCJQcm92aWRlcyBWaW0ga2V5YmluZGluZ3MgZm9yIFR5cGVTY3JpcHQgUGxheWdyb3VuZCBlZGl0b3IuXCIsXG4gICAgYXV0aG9yOiBcInF1cmFteVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtcGxheWdyb3VuZC1wbHVnaW4tdmltXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlRzIFRyYW5zZm9ybSBSdW50aW1lIENoZWNrXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC10cy10cmFuc2Zvcm0tcnVudGltZS1jaGVja1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkEgcGxheWdyb3VuZCBwbHVnaW4gZm9yIHRzLXRyYW5zZm9ybS1ydW50aW1lLWNoZWNrXCIsXG4gICAgYXV0aG9yOiBcImtldnJhbVwiLFxuICAgIGhyZWY6XG4gICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9rZXZpbnJhbWhhcmFrL3BsYXlncm91bmQtdHMtdHJhbnNmb3JtLXJ1bnRpbWUtY2hlY2tcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUHJlc2VudGF0aW9uIE1vZGVcIixcbiAgICBpZDogXCJ0eXBlc2NyaXB0LXBsYXlncm91bmQtcHJlc2VudGF0aW9uLW1vZGVcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiUHJlc2VudCB5b3VyIFR5cGVTY3JpcHQgdGFsayBkaXJlY3RseSBpbiB0aGUgcGxheWdyb3VuZCwgcG93ZXJlZCBieSBHaXRIdWIgZ2lzdHMhXCIsXG4gICAgYXV0aG9yOiBcIm9ydGFcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vcnRhL3BsYXlncm91bmQtc2xpZGVzXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkNvZGUgU2hvdyBGbG93XCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1jb2RlLXNob3ctZmxvd1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlZpc3VhbGl6ZSBUeXBlU2NyaXB0J3MgY29kZSBpbmZlcmVuY2UgZmxvdyBub2Rlc1wiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLWNvZGUtc2hvdy1mbG93XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIlRzIFNjYW5uZXJcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLXRzLXNjYW5uZXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTZWUgdGhlIHJlc3VsdHMgb2YgdGhlIFR5cGVTY3JpcHQgU2Nhbm5lciBvbiBzb21lIGNvZGVcIixcbiAgICBhdXRob3I6IFwib3J0YVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL29ydGEvcGxheWdyb3VuZC10cy1zY2FubmVyXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkNvbGxhYm9yYXRlXCIsXG4gICAgaWQ6IFwicGxheWdyb3VuZC1jb2xsYWJvcmF0ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkEgc2ltcGxlIHdheSB0byBsaXZlLWNvZGUgaW4gdGhlIFBsYXlncm91bmQgd2l0aCBvdGhlcnMuXCIsXG4gICAgYXV0aG9yOiBcIm9ydGFcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vcnRhL3BsYXlncm91bmQtY29sbGFib3JhdGVcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVHJhbnNmb3JtZXIgVGltZWxpbmVcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLXRyYW5zZm9ybWVyLXRpbWVsaW5lXCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIkxldHMgeW91IHNlZSBlYWNoIHN0YWdlIG9mIHRoZSB0cmFuc2Zvcm0gcHJvY2VzcyBmb3IgYSBUeXBlU2NyaXB0IEpTICsgRFRTIGVtaXQgYXMgYSB0aW1lbGluZS5cIixcbiAgICBhdXRob3I6IFwib3J0YVwiLFxuICAgIGhyZWY6IFwiaHR0cHM6Ly9naXRodWIuY29tL29ydGEvcGxheWdyb3VuZC10cmFuc2Zvcm1lci10aW1lbGluZVwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJAVHlwZSBDaGFsbGVuZ2VzL3BsdWdpblwiLFxuICAgIGlkOiBcIkB0eXBlLWNoYWxsZW5nZXMvcGxheWdyb3VuZC1wbHVnaW5cIixcbiAgICBkZXNjcmlwdGlvbjogXCJQbGF5Z3JvdW5kIGludGVncmF0aW9uIGZvciBUeXBlIENoYWxsZW5nZXNcIixcbiAgICBhdXRob3I6IFwiYW50ZnVcIixcbiAgICBocmVmOlxuICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vdHlwZS1jaGFsbGVuZ2VzL3BsYXlncm91bmQtdHlwZS1jaGFsbGVuZ2VzLXBsdWdpblwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDbGlwcHlcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLWNsaXBweVwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJGaW5hbGx5LCBzb21lb25lIHdobyBoYXMgYW4gYW5zd2VyIGZvciBldmVyeSBwcm9ibGVtIGluIHlvdXIgUGxheWdyb3VuZFwiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLWNsaXBweVwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJDb2RlYmxvY2sgRXhhbXBsZXNcIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLXBsdWdpbi1jb2RlYmxvY2stZXhhbXBsZXNcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiVXNlIG1hcmtkb3duIGNvZGVibG9ja3MgdG8gZGVtbyBtYW55IGNvZGUgc2FtcGxlcyBpbiB0aGUgcGxheWdyb3VuZFwiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLXBsdWdpbi1jb2RlYmxvY2stZXhhbXBsZXNcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVHlwZVNjcmlwdCBKc29uIFNjaGVtYVwiLFxuICAgIGlkOiBcInBsYXlncm91bmQtdHlwZXNjcmlwdC1qc29uLXNjaGVtYVwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJDb252ZXJ0IHRoZSBleHBvcnRlZCB0eXBlcy9pbnRlcmZhY2VzIGluIHRoZSBQbGF5Z3JvdW5kIHRvIEpTT04gU2NoZW1hc1wiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLXR5cGVzY3JpcHQtanNvbi1zY2hlbWFcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiVHMgU3ltYm9sc1wiLFxuICAgIGlkOiBcInBsYXlncm91bmQtdHMtc3ltYm9sc1wiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJTaG93cyB0aGUgY29tcGlsZXIgc3ltYm9scyB3aGljaCBhcmUgY3JlYXRlZCBieSB5b3VyIHBsYXlncm91bmQgY29kZVwiLFxuICAgIGF1dGhvcjogXCJvcnRhXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vb3J0YS9wbGF5Z3JvdW5kLXRzLXN5bWJvbHNcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwiUGxhbm5pbmcgRGF5XCIsXG4gICAgaWQ6IFwicGxhbm5pbmctZGF5XCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIlR5cGVTY3JpcHQgUGxheWdyb3VuZCBwbHVnaW4gZm9yIHBsYW5uaW5nIGFuIGFnaWxlIHNwcmludCBvciBpdGVyYXRpb24gYnkgY29tYmluaW5nIHN0YXRpYyB0eXBlIHZlcmlmaWNhdGlvbiBvZiBjb25maWd1cmF0aW9uIHdpdGggYSBSZWFjdCBHYW50dCBjaGFydCB2aXN1YWxpemF0aW9uLlwiLFxuICAgIGF1dGhvcjogXCJqc3VkZXJcIixcbiAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9KU3VkZXIteHgvcGxhbm5pbmctZGF5XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIkR0cyBQbHVnaW5cIixcbiAgICBpZDogXCJwbGF5Z3JvdW5kLWR0cy1wbHVnaW5cIixcbiAgICBkZXNjcmlwdGlvbjogXCJHZW5lcmF0ZSBkLnRzIGZyb20gSlNcIixcbiAgICBhdXRob3I6IFwic2FuZGVyc19uXCIsXG4gICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vc2FuZGVyc24vcGxheWdyb3VuZC1kdHMtcGx1Z2luXCIsXG4gIH0sXG5dO1xuIl19